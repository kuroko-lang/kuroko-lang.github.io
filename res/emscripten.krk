'''
@file   emscripten.krk
@brief  Backend support library for the Kuroko Web IDE.
@author K. Lange <klange@toaruos.org>

'''
import dis
import os
import stat
import fileio
import time
import json
from js import exec, run_worker, destroy_worker, JSObject

let home: str = os.environ.get('HOME','/')

def debug(*args: list[any]):
    '''@brief Prints to the "IDE Debug" tab.'''
    let argString = ' '.join([str(x) for x in args])
    let out = f'[{int(time.time())}] {argString}'.replace('`','\\`')
    exec(f'ideDebug(`{out}`);')

# Configuration to map file types to icon colors
# TODO: These should probably be moved to the CSS styles.
let iconColors: dict[str,str] = {
    'code': 'red', # Actually that works just fine
    'text': 'white',
    'project': '#48b048', # string green
    'directory': '#e6ce6e', # builtin yellow
    'info': '#33a2e6', # keyword blue
}

# Configuration to map file types to Feather icon names
let iconNames: dict[str,str] = {
    'code': 'code',
    'text': 'text',
    'project': 'package',
    'directory': 'folder',
    'info': 'info',
}

# Stores the command name -> function mappings
let shell_commands: dict[str,function[list[str]]] = {}

def shellCommand(func: function[list[str]]) -> function[list[str]]:
    '''@brief Binds a function as a command for the ide's terminal.'''
    shell_commands[func.__name__] = func
    return func

def colorFile(file: tuple) -> str:
    '''@brief Applies color escapes to files.'''
    let name, result = file
    if stat.S_ISDIR(result.st_mode):
        return f'\[[34m{name}\[[0m'
    else:
        return f'{name}'

def printFileLong(file: tuple, maxLength: int):
    '''@brief Prints a file in the long format.'''
    let name, result = file
    let padding = (maxLength + 2) - len(name)
    print(colorFile(file) + ' ' * padding, result.st_size)

def printFileShort(file: tuple, maxLength: int):
    '''@brief Prints a file in the short format.'''
    let name, result = file
    let padding = (maxLength + 2) - len(name)
    print(colorFile(file) + ' ' * padding,end='')

@shellCommand
def ls(args: list[str]):
    '''@brief List directory.'''
    # Pop 'ls' from args
    args.pop(0)
    # Set up flags
    let targets = ['.']
    let human = False
    let long = False
    let showAll = False
    # Process arguments
    while args and args[0].startswith('-'):
        for c in args[0][1:]:
            if c == 'l':
                long = True
            elif c == 'h':
                human = True
            elif c == 'a':
                showAll = True
            else:
                fileio.stderr.write(f'ls: unrecognized option "{c}"\n')
        args.pop(0)
    if args: targets = args
    for directory in targets:
        if len(targets) > 1:
            print(f'Directory listing for {directory}')
        let files = {}
        for d in fileio.opendir(directory):
            let name = d['name']
            if name.startswith('.') and not showAll: continue
            # Stat that, all on the floor...
            let result = os.stat(directory + '/' + name)
            files[name] = (name, result)
        if files:
            let maxLength = max([len(x) for x in files.keys()])
            if long:
                for key in sorted(files.keys()):
                    printFileLong(files[key], maxLength)
            else:
                for key in sorted(files.keys()):
                    printFileShort(files[key], maxLength)
                print('')
        if len(targets) > 1:
            print('')

@shellCommand
def pwd(args: list[str]):
    '''@brief Print working directory.'''
    print(os.getcwd())

@shellCommand
def cd(args: list[str]):
    '''@brief Change working directory.'''
    let target = home if len(args) < 2 else args[1]
    try:
        os.chdir(target)
    except Exception as e:
        print(f"cd: {target}:", e)

@shellCommand
def uname(args: list[str]):
    '''@brief Print system information.'''
    args.pop(0)
    let order = ['sysname','nodename','release','version','machine']
    let enabled = [0,0,0,0,0]
    while args and args[0].startswith('-'):
        for c in args[0][1:]:
            if c == 'a':
                enabled = [1,1,1,1,1]
            elif c == 's':
                enabled[0] = 1
            elif c == 'n':
                enabled[1] = 1
            elif c == 'r':
                enabled[2] = 1
            elif c == 'v':
                enabled[3] = 1
            elif c == 'm':
                enabled[4] = 1
            else:
                fileio.stderr.write(f'ls: unrecognized option "{c}"\n')
        args.pop(0)
    if not any(enabled):
        enabled[0] = 1
    let values = os.uname()
    print(*[values[order[i]] for i in range(len(order)) if enabled[i]])

@shellCommand
def help(args: list[str]):
    print("This is a simple facsimile of a Unix shell.")
    print("Here are the available commands:")
    let maxLen = max([len(x) for x in shell_commands.keys()])
    for cmd in sorted(shell_commands.keys()):
        print(cmd + " " * (maxLen - len(cmd) + 2),end='')
    print('')

@shellCommand
def cat(args: list[str]):
    '''@brief Concatenate files.'''
    args.pop(0)
    if not args:
        fileio.stderr.write("cat: stdin doesn't really exist\n")
    else:
        for arg in args:
            try:
                with fileio.open(arg,'r') as f:
                    print(f.read())
            except as e:
                fileio.stderr.write(f'cat: {arg}: {e!r}\n')

@shellCommand
def mkdir(args: list[str]):
    '''@brief Make directory.'''
    args.pop(0)
    if not args:
        fileio.stderr.write('mkdir: expected argument\n')
    else:
        os.mkdir(args.pop(0))

@shellCommand
def touch(args: list[str]):
    '''@brief Create empty files and update timestamps.'''
    args.pop(0)
    if not args:
        fileio.stderr.write('touch: missing file argument\n')
    else:
        with fileio.open(args[0],'a') as f:
            pass

@shellCommand
def clear(args: list[str]):
    '''@brief Clear the terminal.'''
    exec('document.getElementById("output-container").innerHTML = "";')

@shellCommand
def sync(args: list[str]):
    '''@brief Write out the in-memory filesystem to the IndexedDB persistent copy.'''
    exec('FS.syncfs(function (err) { console.log(err); });')
    syncProjectList()

@shellCommand
def rm(args: list[str]):
    '''@brief Delete files and directories.'''
    let removeDir = False
    args.pop(0)
    if args and args[0] == '-r':
        removeDir = True
        args.pop(0)
    for arg in args:
        try:
            let result = os.stat(arg)
            if not removeDir and stat.S_ISDIR(result.st_mode):
                raise os.OSError(f"is a directory and -r was not specified")
            os.remove(arg)
        except as e:
            print(f"rm: {arg}: {e}")

@shellCommand
def kuroko(args: list[str]):
    '''@brief Execute Kuroko scripts.'''
    args.pop(0)
    if not args:
        executeFile("",interactive=True)
    else:
        executeFile(args[0])

@shellCommand
def open(args):
  args.pop(0)
  if not args:
    fileio.stderr.write('open: expected argument\n')
  else:
    let path = args[0]
    if not path.startswith('/'):
      path = os.getcwd() + '/' + path
    openFile(path)

class FileNode(object):
    def __init__(self, path, fileType, children=[]):
        let filename = path.split('/')[-1]
        self.path  = path
        self.name  = filename
        self.type  = fileType
        self.color = iconColors.get(fileType, 'white')
        self.icon  = iconNames.get(fileType, 'alert-triangle')
        self.children = sorted(children)
    def __lt__(self, other):
        if not isinstance(other,FileNode): return NotImplementedError()
        if self.type == 'directory' and other.type != 'directory': return True
        else if self.type == other.type: return self.name < other.name
        return False
    def __gt__(self, other):
        if not isinstance(other,FileNode): return NotImplementedError()
        if other.type == 'directory' and self.type != 'directory': return True
        else if self.type == other.type: return self.name > other.name
        return False

def createListEntry(obj):
    let children = ('<ul>' + ''.join([createListEntry(c) for c in obj.children]) + '</ul>') if obj.type in ('project','directory') else ''
    let onclick = f'toggleDirectory(this)' if obj.type in ('project','directory') else f'openEmscriptenFile(\'{obj.path}\')'
    let buttons = ''
    if obj.type in ('project','directory'):
      buttons = f'''
        <svg onclick="newFolder('{obj.path}')" class="icon-sm add-button" viewBox="0 0 24 24"><use href="#icon-folder"></use></svg>
        <svg onclick="newFile('{obj.path}')" class="icon-sm add-button" viewBox="0 0 24 24"><use href="#icon-text"></use></svg>
      '''
    return f'''<li>
      <a class="file-item" ondblclick="{onclick}" oncontextmenu="showContextMenu(\'{obj.path}\');" em-path="{obj.path}">
        <svg class="icon-sm" viewBox="0 0 24 24" style="color: {obj.color}"><use href="#icon-{obj.icon}"></use></svg>
        <span class="tab-title">{obj.name}</span>
        {buttons}
      </a>
      {children}
    </li>'''

def setFiles(roots):
    let rootEntries = ''.join([createListEntry(root) for root in roots])
    exec(f'document.getElementById("panel-files").querySelector(".panel-contents").innerHTML = `<ul>{rootEntries}</ul>`;')

def discoverFiles(path):
    let out = []
    try:
        with fileio.opendir(path) as d:
            for entry in d:
                if entry['name'].startswith('.'): continue
                let filepath = path + '/' + entry['name']
                try:
                    let statResult = os.stat(filepath)
                    if stat.S_ISDIR(statResult.st_mode):
                        out.append(FileNode(filepath,'directory',discoverFiles(filepath)))
                    else:
                        out.append(FileNode(filepath,'code' if filepath.endswith('.krk') else 'text'))
    return out

def realFiles(projects):
    let roots = [FileNode(project,'project',discoverFiles(project)) for project in projects]
    setFiles(roots)


def jsonFilter(c):
    let mapping = {
        '"': '\\"',
        '\\': '\\\\',
        '\b': '\\b',
        '\f': '\\f',
        '\n': '\\n',
        '\r': '\\r',
        '\t': '\\t',
    }
    return mapping[c] if c in mapping else c

def dumpJson(o):
    if isinstance(o,list):
        return '[' + ','.join([dumpJson(i) for i in o]) + ']'
    else if isinstance(o,int):
        return repr(o)
    else if isinstance(o,str):
        return '"' + ''.join([jsonFilter(c) for c in o]) + '"'
    else if isinstance(o,dict):
        return '{' + ','.join([dumpJson(k) + ':' + dumpJson(v) for k, v in o.items()]) + '}'
    else:
        return dumpJson(str(o))

def syncProjectList():
    let projects = []
    with fileio.opendir(home) as homeDir:
        for entry in homeDir:
            if entry['name'].startswith('.'): continue
            let statResult = os.stat(home + '/' + entry['name'])
            if stat.S_ISDIR(statResult.st_mode):
                debug(f"{entry['name']} looks like a project")
                projects.append(home + '/' + entry['name'])
    realFiles(projects)

def filesystemReady():
    '''Called from JS after the IDBFS has been initialized.'''
    # Load project list.
    debug("Filesystem is ready, loading project list.")
    syncProjectList()
    # Get configuration data
    let configData = JSObject('ideConfig')
    if not configData:
        # Add welcome tab.
        showWelcomeTab()
    else:
        try:
            let config = json.loads(configData)
            if 'tabs' in config:
                for tab in config['tabs']:
                    openFile(tab)
            if 'active' in config:
                if config['active'] in editorTabs:
                    editorTabs[config['active']].activate()
                else if config['active'] == 'WELCOME':
                    showWelcomeTab()
        except as e:
            debug("Config looks bad...", str(e))

let cMP = None
def setupContextMenu(path):
    debug("Setting up context menu for", path)
    cMP = path
    let role
    if '/' not in path.replace(home + '/',''):
        # Assume it's a project.
        role = 'project'
    else:
        let statResult = os.stat(path)
        if stat.S_ISDIR(statResult.st_mode):
            role = 'directory'
        else:
            role = 'file'
    exec(f'document.getElementById("file-context-menu").setAttribute("role","{role}");')

let runningCode = False
let debuggerActive = 0
def shell_prompt():
    let cwd = os.getcwd()
    if cwd == home: cwd = '~'
    else if cwd.startswith(home + '/'): cwd = cwd.replace(home,'~',1)
    let status = '(paused) ' if debuggerActive else '(executing) ' if runningCode else ''
    return f'{status}{cwd} $'

let askingForInput = None
def updatePrompt():
    let msg = f'{shell_prompt()}&nbsp;' if not askingForInput else cleanHtml(askingForInput).replace(' ','&nbsp;')
    exec(f"document.getElementById('shell-prompt').innerHTML = `{msg}`;")
    if askingForInput == '>>> ':
        exec('extraEditor.session.setMode("ace/mode/kuroko");')
    else:
        exec('extraEditor && extraEditor.session.setMode(null);')

def em_shell(s):
    if askingForInput:
        askingForInput = None
        postDebuggerMessage(s)
        updatePrompt()
        return
    print(shell_prompt(), s)
    let lex = [x for x in s.strip().split(' ') if x]
    if lex and lex[0] in shell_commands:
        try:
            shell_commands[lex[0]](lex)
        except Exception as e:
            fileio.stderr.write(f'Uncaught exception ({e!r}) occurred during execution of command.\n')
    else if lex:
        fileio.stderr.write(f'Command not found: {lex[0]}\n')
    updatePrompt()

let tabs = {} # Doesn't care about ordering.
let editorTabs = {}

class Tab():
    tabId = 0
    def __init__(self, name, content='Demo tab', icon='info', iconColor='info'):
        self.name = name
        self.content = content
        self.icon = icon
        self.iconColor = iconColors[iconColor]
        self.id = 'tab-ind-' + str(Tab.tabId)
        self.hint = name
        Tab.tabId++
        tabs[self.id] = self
    def renderTab(self):
        return f'''
          <div class="tab" id="{self.id}-tab" data-bs-toggle="tab" data-bs-target="#{self.id}" role="tab" aria-controls="{self.id}" aria-selected="false">
            <svg style="color: {self.iconColor};" class="icon-sm tab-icon" viewBox="0 0 24 24"><use href="#icon-{self.icon}"></use></svg>
            <span class="tab-title">
                {self.name}
            </span>
            <svg class="icon-sm close-button" viewBox="0 0 24 24" onclick="closeTab('{self.id}')"><use href="#icon-x"></use></svg>
            <div class="tooltipholder">
              <div class="tooltiptext">{self.hint}</div>
            </div>
          </div>
        '''
    def renderContent(self):
        return f'''
          <div class="tab-pane" role="tabpanel" id="{self.id}" aria-labelledby="{self.id}-tab">
            {self.content}
          </div>
        '''
    def activate(self):
        exec(f'document.getElementById("{self.id}-tab").click();')
    def realize(self):
        # Add to tab bar
        exec(f'addTab(`{self.renderTab()}`,`{self.renderContent()}`);')

class EditorTab(Tab):
    def __init__(self, path):
        let icon = 'code' if path.endswith('.krk') else 'text'
        super().__init__(path.split('/')[-1], icon=icon, iconColor=icon)
        self.path = path
        self.hint = path
        self.modified = None
        self.codeCache = None
    def renderContent(self):
        return f'''
          <div class="tab-pane has-statusbar" role="tabpanel" id="{self.id}" aria-labelledby="{self.id}-tab">
            <div id="{self.id}-editor" class="terminal-container above-statusbar"></div>
            <div class="status-bar">
              <div class="status-content">
                <svg class="icon-sm" viewBox="0 0 24 24"><use href="#icon-x-circle"></use></svg>
                <span class="status-errors">0</span>
              </div>
              <div class="status-content">
                <svg class="icon-sm" viewBox="0 0 24 24"><use href="#icon-alert-triangle"></use></svg>
                <span class="status-warnings">0</span>
              </div>
              <div class="status-content">
                <svg class="icon-sm" viewBox="0 0 24 24"><use href="#icon-info"></use></svg>
                <span class="status-info">0</span>
              </div>
              <div class="status-editor">
                Line <span class="status-line">1</span>, Column <span class="status-column">1</span>
              </div>
            </div>
          </div>
        '''
    def realize(self):
        super().realize()
        exec(f'let myNewEditor = createEditor("{self.id}-editor",`{self.path}`);')
    def setModified(self):
        if self.modified is None:
            self.modified = False
            return
        exec(f'document.getElementById("{self.id}-tab").querySelector(".tab-title").innerText = `{self.name}*`;')
        self.modified = True
    def unsetModified(self):
        exec(f'document.getElementById("{self.id}-tab").querySelector(".tab-title").innerText = `{self.name}`;')
        self.modified = False
        self.updateOutline()
    def updateOutline(self):
        if self.icon != 'code':
            setRunnableState(False)
            setOutline('')
            return
        let c
        try:
            with fileio.open(self.path,'r') as f:
                c = CodeObject.fromCode(f.read())
        except:
            setRunnableState(False)
            setOutline('')
            return
        let annotations = '[]'
        let errorColor, errorCount = 'unset', 0
        let warningColor, warningCount = 'unset', 0
        let infoColor, infoCount = 'unset', 0
        let runnableState = True
        if isinstance(c,CodeObject):
            self.codeCache = c
            let t = makeOutline(c.makeTree()[2])
            setOutline(t)
            let undef = c.checkReferences()
            if undef:
                warningColor = 'orange'
                warningCount = len(undef)
                annotations = '[' + ','.join([makeAnnotations(x) for x in undef]) + ']'
        else:
            errorColor = 'red'
            errorCount = 1
            annotations = '[{' + f'row: {c[0]-1}, column: {c[1]-1}, text: "{c[2]}", type: "error"' + '}]'
            runnableState = False

        # Play button state
        setRunnableState(runnableState)
        # Errors
        exec(f'document.getElementById("{self.id}").querySelector(".status-errors").parentNode.style.color = "{errorColor}";')
        exec(f'document.getElementById("{self.id}").querySelector(".status-errors").innerText = "{errorCount}";')
        # Warnings
        exec(f'document.getElementById("{self.id}").querySelector(".status-warnings").parentNode.style.color = "{warningColor}";')
        exec(f'document.getElementById("{self.id}").querySelector(".status-warnings").innerText = "{warningCount}";')
        # Info
        exec(f'document.getElementById("{self.id}").querySelector(".status-info").parentNode.style.color = "{infoColor}";')
        exec(f'document.getElementById("{self.id}").querySelector(".status-info").innerText = "{infoCount}";')
        # Editor annotations
        exec(f'document.getElementById("{self.id}-editor")._aceInstance.getSession().setAnnotations({annotations});')

def setOutline(t):
    exec(f'document.getElementById("panel-outline").querySelector(".panel-contents").innerHTML = `{t}`;')

def setRunnableState(runnableState):
    exec(f'document.getElementById("run-button").classList.{"add" if runnableState else "remove"}("runnable");')

def makeAnnotations(undefined):
    let var, lines = undefined
    return ','.join(['{' + f'''row: {l-1}, column: 0, text: "Global '{var}' is never declared.", type: "warning"''' + '}' for l in lines])

def makeOutline(children):
    return '<ul>' + ''.join([f'''
        <li>
            <a class="file-item" ondblclick="currentEditor().gotoLine({l},1,1);">
                <svg style="color: {d[2]};" class="icon-sm" viewBox="0 0 24 24"><use href="#icon-{d[1]}"></use></svg>
                <span>{d[0]}</span>
            </a>
            {makeOutline(c)}
        </li>
    ''' for d,l,c in children]) + '</ul>' if children else ''

def tabClosed(tabId,force=False):
    debug(f"js reports tab {tabId} wants to close")
    if tabId in tabs:
        if isinstance(tabs[tabId],EditorTab) and tabs[tabId].path in editorTabs:
            if tabs[tabId].modified and not force:
                return False
            del editorTabs[tabs[tabId].path]
        del tabs[tabId]

def reportChange(editorId):
    if editorId.endswith('-editor'):
        let tabId = editorId[:-7]
        if tabId in tabs and isinstance(tabs[tabId], EditorTab) and not tabs[tabId].modified:
            tabs[tabId].setModified()

def reportSaved(editorId):
    debug(f'JS says {editorId} was saved, ensuring it is not marked modified')
    if editorId.endswith('-editor'):
        let tabId = editorId[:-7]
        if tabId in tabs and isinstance(tabs[tabId], EditorTab):
            tabs[tabId].unsetModified()

def reportShown(tabIdTab):
    let tabId = tabIdTab[:-4]
    if tabId in tabs and isinstance(tabs[tabId],EditorTab):
        tabs[tabId].updateOutline()
    else:
        setRunnableState(False)
    # Update tab data
    let tabIds = sorted([tab.id for key, tab in editorTabs.items()])
    let tabPaths = [tabs[tabId].path for tabId in tabIds]
    let ideConfig = dumpJson({'tabs': tabPaths, 'active': tabs[tabId].path if tabId in tabs and isinstance(tabs[tabId],EditorTab) else 'WELCOME'})
    exec(f'''localStorage.setItem("ideconfig",`{ideConfig}`);''')

def hasUnsaved():
  for k,v in editorTabs.items():
    if v.modified:
      return True
  return False

def openFile(path):
    # Is this file already open?
    if path in editorTabs:
        editorTabs[path].activate()
        return

    try:
        let f = fileio.open(path,'r')
    except:
        fileio.stderr.write("failed to open file\n")
        return

    let newTab = EditorTab(path)
    editorTabs[path] = newTab
    newTab.realize()
    newTab.activate()

let currentWorker = None
let cleanupWorkers = []

def finishRunning(cleanup=True):
    exec('dismissSpinner();')
    runningCode = False
    debuggerActive = False
    askingForInput = None
    updatePrompt()
    if cleanup: cleanupWorkers.append(currentWorker)
    currentWorker = None

let debuggerSettings = {}
def updateDebuggerSettings(**args):
    debuggerSettings = args
    debug("Updated debugger settings to", debuggerSettings)

def cleanHtml(s):
    return s.replace('<','&lt;').replace('>','&gt;').replace('\\','\\\\').replace('`','\\`')

def executeFile(path,interactive=False):
    def _callback(data):
        debug('Received final callback from worker for', path, '=>', data)
        finishRunning()
    if currentWorker:
        fileio.stderr.write('Please wait until the currently running worker has finished.\n')
        return
    while cleanupWorkers:
        destroy_worker(cleanupWorkers.pop(0))
    debug('Calling worker to run', path)
    runningCode = True
    debuggerActive = False
    updatePrompt()
    # Get debugger flags
    let flags = ''
    if 'single' in debuggerSettings:
        flags += 's'
    if interactive:
        flags += 'i'
    currentWorker = run_worker('/kuroko.js', path, _callback, flags)
    debug("Started worker", currentWorker)

def postDebuggerMessage(msg):
    exec(f'Browser.workers[{currentWorker}].worker.postMessage(`{msg}`);')
    exec('showSpinner();')

def padHex(off):
    let s = hex(off).replace('0x','').upper()
    if len(s) < 2: return '0' * (2 - len(s)) + s
    return s

def inputCallback(prompt):
    askingForInput = prompt
    updatePrompt()

def debuggerCallback(blob):
    let data = json.loads(blob)
    debug(data)
    let filename = data.get('file','')
    let func = data.get('function','')
    let offset = data.get('offset',0)
    let line = data.get('line',1)
    let opcode = data.get('opcode',0)
    let opcodeName = CodeObject._findOpcodeName(opcode)
    let codeObject = None

    if filename in editorTabs:
        codeObject = editorTabs[filename].codeCache
        let id = editorTabs[filename].id
        let annotations = '[{' + f'row: {line-1}, column: 0, text: "breakpoint", type: "info"' + '}]'
        exec(f'document.getElementById("{id}-editor")._aceInstance.getSession().setAnnotations({annotations});')
        if 'gotoline' in debuggerSettings:
            editorTabs[filename].activate()
            exec(f'document.getElementById("{id}-editor")._aceInstance.gotoLine({line},1,1);')
    else:
        exec(f'document.getElementById("debugger-disassembly").innerText = `in file {filename}:{line}`;')

    exec(f'document.getElementById("debugger-offset").innerText = `{func}+{hex(offset)}`;')

    if codeObject:
        let maybeFunc = codeObject.getFunction(func,line)
        if maybeFunc:
            let disassembly = []
            let off = 0
            let seenOffset = False
            let count = 0
            for i in dis.examine(maybeFunc):
                if off == offset: seenOffset = True
                if seenOffset:
                    disassembly.append(f'''
                        <div class="instruction">
                            <div class="ip">{">" if offset == off else " "}</div>
                            <div class="offset">{padHex(off)}</div>
                            <div class="opcode">{CodeObject._findOpcodeName(i[0])[3:]}</div>
                            <div class="operand {"ace_string" if isinstance(i[2],str) else "ace_numeric" if isinstance(i[2],(int,float)) else ""}">{cleanHtml(repr(i[2])) if isinstance(i[2],(int,str)) else ""}</div>
                        </div>''')
                    if count++ > 30: break
                off += i[1]
            exec(f'document.getElementById("debugger-disassembly").innerHTML = `{"\n".join(disassembly)}`;')

    exec('dismissSpinner();')
    exec('showDebugger();')
    debuggerActive = True
    updatePrompt()

def stopWorker():
    if currentWorker is None:
        fileio.stderr.write('No worker is currently running (nothing to stop).\n')
        return
    debug('Destroying worker #' + str(currentWorker))
    destroy_worker(currentWorker)
    finishRunning(False)

class CodeObject():
    _opcodeCache = {}
    def __init__(self, real, code):
        self.func = real
        self.code = code

    @classmethod
    def fromCode(cls, code):
        let func
        try:
            func = dis.build(code)
        except SyntaxError as e:
            debug({a:getattr(e,a) for a in dir(e) if not a.startswith('_')})
            return (e.lineno, e.colno, e.arg)
        return cls(func,code)

    def getFunction(self, name, line, func=self.func):
        let instructions = dis.examine(func)
        let offset = 0
        for i in instructions:
            if func.__name__ == name and func._ip_to_line(offset) == line: return func
            else if isinstance(i[2],codeobject):
                let check = self.getFunction(name,line,i[2])
                if check: return check
            offset += i[1]
        return None

    def makeTree(self, func=self.func):
        let instructions = dis.examine(func)
        let line = func._ip_to_line(0)
        let description
        if instructions and instructions[0][0] == dis.OP_CLASS:
            description = ('class <b>' + func.__name__ + '</b>()','layers','#33a2e6',func.__name__)
        else if func.__name__ == '<lambda>':
            description = ('lambda (' + str(line) + ')','chevron-up','#e62b7f', None)
        else if func.__name__ == '<genexpr>':
            description = ('generator (' + str(line) + ')','filter','#e62b7f', None)
        else if func.__name__ == '<listcomp>':
            description = ('list comprehension (' + str(line) + ')','list','#e62b7f', None)
        else if func.__name__ == '<dictcomp>':
            description = ('dict comprehension (' + str(line) + ')','map','#e62b7f', None)
        else if func.__name__ == '<setcomp>':
            description = ('set comprehension (' + str(line) + ')','share-2','#e62b7f', None)
        else if func.co_flags & 0x20:
            description = ('generator <b>' + func.__name__ + '</b>()','box','#e62b7f', func.__name__)
        else if func.co_flags & 0x80:
            description = ('async def <b>' + func.__name__ + '</b>()','box','#e62b7f', func.__name__)
        else:
            description = ('def <b>' + func.__name__ + '</b>()','box','#e62b7f',func.__name__)
        let children = []
        let offset = 0
        for instruction in dis.examine(func):
            if isinstance(instruction[2],codeobject):
                children.append(self.makeTree(instruction[2]))
            else if instruction[0] in (dis.OP_IMPORT,dis.OP_IMPORT_LONG):
                children.append( (('import <b>' + instruction[2] + '</b>', 'package', '#48b048', instruction[2]), func._ip_to_line(offset), []) )
            else if instruction[0] in (dis.OP_DEFINE_GLOBAL,dis.OP_DEFINE_GLOBAL_LONG) and (instruction[2] not in ([d[3] for d,l,c in children])):
                children.append( (('let <b>' + instruction[2] + '</b>', 'square', '#e6ce6e', instruction[2]), func._ip_to_line(offset), []) )
            offset += instruction[1]
        return (description, line, children)

    def checkReferences(self):
        let defined = set()
        let referenced = set()
        let references = {}
        def recursor(func):
            let instructions = dis.examine(func)
            let offset = 0
            for instruction in instructions:
                if isinstance(instruction[2],codeobject):
                    recursor(instruction[2])
                else if instruction[0] in (dis.OP_DEFINE_GLOBAL,dis.OP_DEFINE_GLOBAL_LONG):
                    defined.add(instruction[2])
                else if instruction[0] in (dis.OP_SET_GLOBAL, dis.OP_SET_GLOBAL_LONG, dis.OP_GET_GLOBAL, dis.OP_GET_GLOBAL_LONG):
                    if instruction[2] in referenced:
                    else:
                        referenced.add(instruction[2])
                        references[instruction[2]] = [func._ip_to_line(offset)]
                offset += instruction[1]
        recursor(self.func)
        let undefined = {
            x for x in referenced
            if x not in defined
            and x not in dir(__builtins__)
            and x != '__builtins__'
            and x != '__annotations__'
        }
        return [(x,references[x]) for x in undefined]

    @classmethod
    def _findOpcodeName(cls, i):
        # Okay, so I did a dumb with this, but let's work around it.
        if not cls._opcodeCache:
            for attr in dir(dis):
                if attr.startswith('OP_'):
                    cls._opcodeCache[getattr(dis,attr)] = attr
        return cls._opcodeCache[i]

    def _truncateCode(self):
        if len(self.code) > 20: return repr(self.code[:20] + '...')
        else: return repr(self.code)

    def __repr__(self):
        return f'<CodeObject for {self.func.__name__} from {self._truncateCode()}>'

    def __str__(self):
        return self.__repr__()

def showWelcomeTab():
    # Add a new welcome tab.
    let welcomeTab = Tab('Welcome','''
        <div class="p-3">
            <h1>Welcome!</h1>
            <p>This is a fully-client-side in-browser IDE for <a href="/">Kuroko</a>. All files are stored in your browser and persisted through IndexedDB.</p>
            <button type="button" class="btn btn-success me-2 mb-3" data-bs-toggle="modal" data-bs-target="#newProject">
              <svg class="icon-sm" viewBox="0 0 24 24"><use href="#icon-package"></use></svg>
              Create a New Project
            </button>
            <!--
            <button type="button" class="btn btn-secondary me-2 mb-3">
              <svg class="icon-sm" viewBox="0 0 24 24"><use href="#icon-plus-square"></use></svg>
              See a Sample Project
            </button>
            -->
        </div>''')
    welcomeTab.realize()
    welcomeTab.activate()

# Startup stuff
def __main__():
    # Disable automatic traceback dumping
    import kuroko
    kuroko.set_clean_output(True)
    # Print emscripten version info
    uname([None,'-a'])
    # Move to home directory
    os.chdir(home)
    # Update shell prompt
    updatePrompt()
    # Set terminal tab colors
    exec(f'document.getElementById("right-pane-terminal-tab").querySelector("svg").style.color = "{iconColors["project"]}";')
    exec(f'document.getElementById("right-pane-internal-debug-tab").querySelector("svg").style.color = "{iconColors["info"]}";')
    # Pretend we have an input() function
    __builtins__.input = lambda prompt: print("Hello, ", prompt)

