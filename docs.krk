import js
import syntax.highlighter
from web import mappings, escapeAngles


def makeListItem(anchor,title):
  return f'''<a class="list-group-item list-group-item-action" href="#{anchor}">{title}</a>'''

def makeAccordionItem(anchor, title, items, show=False):
  return f'''
      <div class="accordion-item">
        <h2 class="accordion-header" id="toc-{anchor}">
          <button class="accordion-button {'collapsed' if not show else ''}" type="button" data-bs-toggle="collapse" data-bs-target="#toc-collapse-{anchor}"
            aria-expanded="{'true' if show else 'false'}" aria-controls="toc-collapse-{anchor}">
            {title}
          </button>
        </h2>
        <div id="toc-collapse-{anchor}" class="accordion-collapse collapse {'show' if show else ''}" aria-labelledby="toc-{anchor}" data-bs-parent="#toc">
          <div class="accordion-body">
            <div class="list-group list-group-flush">
              {''.join(items)}
            </div>
          </div>
        </div>
      </div>
  '''

def collectHeadings(mainContent):
  let index = []
  let currentHeading = None
  let currentItems = []
  for line in mainContent.split("\n"):
    if '<h2 ' in line:
      let beforeOpen, afterOpen = line.split('<h2 id="',1)
      let anchor, rest = afterOpen.split('">',1)
      let title, afterClose = rest.split('</h2>',1)
      if currentHeading:
        index.append((currentHeading, currentItems))
      currentItems = []
      currentHeading = (anchor, title)
    else if '<h3 ' in line:
      let beforeOpen, afterOpen = line.split('<h3 id="',1)
      let anchor, rest = afterOpen.split('">',1)
      let title, afterClose = rest.split('</h3>',1)
      currentItems.append(makeListItem(anchor,title))
  if currentHeading:
    index.append((currentHeading, currentItems))
  let accordionText = ''.join([makeAccordionItem(h2[0],h2[1],items) for h2, items in index])
  js.exec('document.getElementById("toc").innerHTML = `{}`;'.format(accordionText))
  js.exec('afterToc();')

def highlightOne(code):
  let highlighter = syntax.highlighter.KurokoHighlighter(code)
  highlighter.highlight()
  let classes = ' class="multiline"' if '\n' in code else ''
  let processed = highlighter.process()
  let out = '\n'.join([''.join([mappings[f].format(escapeAngles(w)) for w, f in line]) for line in processed])
  return '''<code{}>{}</code>'''.format(classes, out)

def highlightCode(this):
  let output = ''
  while '<code>' in this:
      let before, after = this.split('<code>',1)
      output += before
      let code, other = after.split('</code>',1)
      output += highlightOne(code)
      this = other
  if this: output += this
  js.exec('document.getElementById("main-content").innerHTML = `{}`;'.format(output))

let mainContent = js.JSObject('document.getElementById("main-content")').innerHTML
highlightCode(mainContent)
collectHeadings(mainContent)
